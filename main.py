import random
import requests
from datetime import datetime
from telegram.ext import ApplicationBuilder, ContextTypes
import asyncio
import schedule
import time
import json
import os
import config

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ü–∏—Ç–∞—Ç –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã
def load_quotes():
    try:
        response = requests.get(config.GOOGLE_SHEET_URL)
        if response.status_code == 200:
            return [line.strip() for line in response.text.splitlines() if line.strip()]
        else:
            print(f"[–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ü–∏—Ç–∞—Ç—ã. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            return []
    except Exception as e:
        print(f"[–û–®–ò–ë–ö–ê] –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–∏—Ç–∞—Ç: {e}")
        return []

# –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç
def load_log():
    if os.path.exists("quotes_log.json"):
        with open("quotes_log.json", "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return []
    return []

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–∞
def save_log(log):
    with open("quotes_log.json", "w", encoding="utf-8") as f:
        json.dump(log, f, ensure_ascii=False, indent=2)

# –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ü–∏—Ç–∞—Ç—É
def get_new_quote(quotes, log):
    used_quotes = [entry["quote"] for entry in log]
    available_quotes = [q for q in quotes if q not in used_quotes]

    if not available_quotes:
        save_log([])
        return random.choice(quotes)
    
    return random.choice(available_quotes)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ü–∏—Ç–∞—Ç—ã
async def send_quote(application: ApplicationBuilder):
    quotes = load_quotes()
    log = load_log()

    quote = get_new_quote(quotes, log)

    try:
        await application.bot.send_message(chat_id=config.CHANNEL_ID, text=quote)
        log.append({
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "quote": quote
        })
        save_log(log)
        print(f"[{datetime.now()}] –¶–∏—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    except Exception as e:
        print(f"[{datetime.now()}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

# –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
async def job_wrapper(application: ApplicationBuilder):
    await send_quote(application)

def scheduled_job(application: ApplicationBuilder):
    asyncio.create_task(job_wrapper(application))

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
def main():
    application = ApplicationBuilder().token(config.BOT_TOKEN).build()

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    def schedule_daily():
        daily_time = random_time()
        print(f"–¶–∏—Ç–∞—Ç–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ {daily_time}")
        schedule.every().day.at(daily_time).do(scheduled_job, application=application)

    schedule_daily()

    while True:
        schedule.run_pending()
        time.sleep(1)

        now = datetime.now().time()
        if now.hour == 0 and now.minute < 2:
            print("üîÑ –°–±—Ä–æ—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å")
            schedule.clear()
            schedule_daily()
            time.sleep(120)  # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞

if __name__ == '__main__':
    main()