import random
from datetime import datetime, time as dt_time
import asyncio
import json
import os
from telegram.ext import ApplicationBuilder, CommandHandler
from github import Github

# === –ö–æ–Ω—Ñ–∏–≥ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID", "@your_channel")
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN", "YOUR_GITHUB_TOKEN")
REPO_OWNER = os.getenv("REPO_OWNER", "SimonSi440")
REPO_NAME = os.getenv("REPO_NAME", "philosophy-bot")
LOG_FILE = "quotes_log.json"
QUOTES_FILE = "quotes.txt"
LOG_PATH = "bot.log"

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GitHub ===
def init_github():
    g = Github(GITHUB_TOKEN)
    repo = g.get_repo(f"{REPO_OWNER}/{REPO_NAME}")
    return repo

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏ –Ω–∞ GitHub ===
def log_info(message, repo):
    with open(LOG_PATH, "a", encoding="utf-8") as f:
        f.write(f"[INFO] {datetime.now()} - {message}\n")
    save_log_to_github(repo, LOG_PATH)

def log_error(message, repo):
    with open(LOG_PATH, "a", encoding="utf-8") as f:
        f.write(f"[ERROR] {datetime.now()} - {message}\n")
    save_log_to_github(repo, LOG_PATH)

def save_log_to_github(repo, log_path):
    try:
        log_content = ""
        if os.path.exists(log_path):
            with open(log_path, "r", encoding="utf-8") as f:
                log_content = f.read()
        
        try:
            contents = repo.get_contents(LOG_PATH)
            repo.update_file(
                path=LOG_PATH,
                message="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤",
                content=log_content,
                sha=contents.sha
            )
        except Exception as e:
            repo.create_file(
                path=LOG_PATH,
                message="–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–æ–≤",
                content=log_content
            )
        log_info("–õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ GitHub", repo)
    except Exception as e:
        log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏ –Ω–∞ GitHub: {e}", repo)

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Ü–∏—Ç–∞—Ç –∏–∑ —Ñ–∞–π–ª–∞ quotes.txt ===
def load_quotes():
    try:
        with open(QUOTES_FILE, "r", encoding="utf-8") as f:
            quotes = [line.strip() for line in f if line.strip()]
            log_info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(quotes)} —Ü–∏—Ç–∞—Ç", repo)
            return quotes
    except Exception as e:
        log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ü–∏—Ç–∞—Ç—ã: {e}", repo)
        return []

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç ===
def load_log(repo):
    try:
        contents = repo.get_contents(LOG_FILE)
        log_data = contents.decoded_content.decode('utf-8')
        log = json.loads(log_data)
        log_info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(log)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –ª–æ–≥–æ–≤", repo)
        return log
    except Exception as e:
        log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–∏: {e}", repo)
        return []

def save_log(repo, log):
    try:
        contents = repo.get_contents(LOG_FILE)
        repo.update_file(
            path=LOG_FILE,
            message="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤",
            content=json.dumps(log, ensure_ascii=False, indent=2),
            sha=contents.sha
        )
        log_info("–õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", repo)
    except Exception as e:
        log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏: {e}", repo)

# === –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã ===
def get_new_quote(quotes, log):
    used_quotes = [entry["quote"] for entry in log]
    available_quotes = [q for q in quotes if q not in used_quotes]

    if not available_quotes:
        log_info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–≤—ã—Ö —Ü–∏—Ç–∞—Ç, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–≥–∏ –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É", repo)
        save_log(repo, [])
        return random.choice(quotes)

    log_info(f"–í—ã–±—Ä–∞–Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –∏–∑ {len(available_quotes)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–∏—Ç–∞—Ç", repo)
    return random.choice(available_quotes)

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Ü–∏—Ç–∞—Ç—ã –≤ Telegram ===
async def send_quote(application, repo):
    quotes = load_quotes()
    if not quotes:
        log_error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–∏—Ç–∞—Ç", repo)
        return

    log = load_log(repo)
    quote = get_new_quote(quotes, log)

    try:
        cleaned_quote = quote.encode('utf-8', errors='ignore').decode('utf-8')
        log_info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ü–∏—Ç–∞—Ç—ã: {cleaned_quote}", repo)
        await application.bot.send_message(chat_id=CHANNEL_ID, text=cleaned_quote)
        log.append({
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "quote": cleaned_quote
        })
        await save_log(repo, log)
        log_info(f"–¶–∏—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {cleaned_quote}", repo)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}", repo)

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ===
def random_time(start_hour=14, end_hour=15):
    hour = random.randint(start_hour, end_hour)
    minute = random.randint(0, 59)
    return f"{hour:02d}:{minute:02d}"

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á ===
async def schedule_daily(application, repo):
    daily_time = random_time()
    log_info(f"–¶–∏—Ç–∞—Ç–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ {daily_time}", repo)
    send_time = datetime.strptime(daily_time, "%H:%M").time()
    while True:
        now = datetime.now().time()
        if now >= send_time:
            log_info(f"–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ü–∏—Ç–∞—Ç—ã –≤ {now}", repo)
            await send_quote(application, repo)
            log_info(f"–û–∫–æ–Ω—á–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ü–∏—Ç–∞—Ç—ã –≤ {now}", repo)
            break
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# === –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º ===
async def start(update, context):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ü–∏—Ç–∞—Ç.")
    log_info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç {update.effective_user.username}", repo)

async def send_test_quote(update, context):
    application = context.application
    repo = init_github()
    await send_quote(application, repo)
    await update.message.reply_text("–¢–µ—Å—Ç–æ–≤–∞—è —Ü–∏—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    log_info(f"–ö–æ–º–∞–Ω–¥–∞ /send_test_quote –æ—Ç {update.effective_user.username}", repo)

async def reset_logs(update, context):
    repo = init_github()
    await save_log(repo, [])
    await update.message.reply_text("–õ–æ–≥–∏ —Å–±—Ä–æ—à–µ–Ω—ã.")
    log_info(f"–ö–æ–º–∞–Ω–¥–∞ /reset_logs –æ—Ç {update.effective_user.username}", repo)

# === –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
async def main():
    global repo
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    repo = init_github()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("send_test_quote", send_test_quote))
    application.add_handler(CommandHandler("reset_logs", reset_logs))

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    await schedule_daily(application, repo)

    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    while True:
        now = datetime.now().time()
        if now.hour == 0 and now.minute < 2:
            log_info("üîÑ –°–±—Ä–æ—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å", repo)
            await schedule_daily(application, repo)
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

if __name__ == '__main__':
    asyncio.run(main())
