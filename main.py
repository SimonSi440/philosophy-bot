import random
from datetime import datetime
import schedule
import asyncio
import time
import json
import os
import requests
from telegram.ext import ApplicationBuilder


# === –ö–æ–Ω—Ñ–∏–≥ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID", "@your_channel")
GOOGLE_SHEET_URL = os.getenv("GOOGLE_SHEET_URL", "https://docs.google.com/spreadsheets/d/.../export?format=csv&id=...&gid=...")

LOG_FILE = "quotes_log.json"


# === –ó–∞–≥—Ä—É–∑–∫–∞ —Ü–∏—Ç–∞—Ç –∏–∑ Google Sheets === 
def load_quotes():
    try:
        response = requests.get(GOOGLE_SHEET_URL)
        if response.status_code == 200:
            # –£–∫–∞–∑—ã–≤–∞–µ–º —è–≤–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8
            return [line.strip() for line in response.text.splitlines() if line.strip()]
        else:
            print(f"[–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ü–∏—Ç–∞—Ç—ã. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            return []
    except Exception as e:
        print(f"[–û–®–ò–ë–ö–ê] –ù–µ –º–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets: {e}")
        return []


# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç ===
def load_log():
    if os.path.exists(LOG_FILE):
        with open(LOG_FILE, "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return []
    return []


def save_log(log):
    with open(LOG_FILE, "w", encoding="utf-8") as f:
        json.dump(log, f, ensure_ascii=False, indent=2)


# === –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã ===
def get_new_quote(quotes, log):
    used_quotes = [entry["quote"] for entry in log]
    available_quotes = [q for q in quotes if q not in used_quotes]

    if not available_quotes:
        save_log([])
        return random.choice(quotes)

    return random.choice(available_quotes)


# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Ü–∏—Ç–∞—Ç—ã –≤ Telegram ===
async def send_quote(application):
    quotes = load_quotes()
    log = load_log()

    quote = get_new_quote(quotes, log)

    try:
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        cleaned_quote = quote.encode('utf-8', 'ignore').decode('utf-8')
        await application.bot.send_message(chat_id=CHANNEL_ID, text=cleaned_quote)
        log.append({
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "quote": cleaned_quote
        })
        save_log(log)
        print(f"[{datetime.now()}] –¶–∏—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {cleaned_quote}")
    except Exception as e:
        print(f"[{datetime.now()}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")


# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á ===
async def job_wrapper(application):
    await send_quote(application)

def scheduled_job(application):
    asyncio.create_task(job_wrapper(application))


# === –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ===
def random_time(start_hour=8, end_hour=12):
    hour = random.randint(start_hour, end_hour)
    minute = random.randint(0, 59)
    return f"{hour:02d}:{minute:02d}"


# === –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    def schedule_daily():
        daily_time = random_time()
        print(f"–¶–∏—Ç–∞—Ç–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ {daily_time}")
        schedule.every().day.at(daily_time).do(scheduled_job, application=application)

    # –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    print("[–¢–ï–°–¢] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ü–∏—Ç–∞—Ç—É...")
    asyncio.run(send_quote(application))

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    schedule_daily()

    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    while True:
        schedule.run_pending()
        time.sleep(1)

        now = datetime.now().time()
        if now.hour == 0 and now.minute < 2:
            print("üîÑ –°–±—Ä–æ—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å")
            schedule.clear()
            schedule_daily()
            time.sleep(120)  # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è


if __name__ == '__main__':
    main()
